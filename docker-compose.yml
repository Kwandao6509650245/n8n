version: '3.8' # กำหนดเวอร์ชันของ Docker Compose

services:
  db:
    image: ankane/pgvector:latest # ใช้ Docker Image ที่มี PostgreSQL และ pgvector ติดตั้งมาให้แล้ว
    restart: always                # ตั้งค่าให้ Container รีสตาร์ทอัตโนมัติหากหยุดทำงาน
    environment:
      POSTGRES_DB: mydatabase      # กำหนดชื่อฐานข้อมูล
      POSTGRES_USER: myuser        # กำหนดชื่อผู้ใช้งานฐานข้อมูล
      POSTGRES_PASSWORD: mypassword # กำหนดรหัสผ่านสำหรับผู้ใช้งานฐานข้อมูล
    ports:
      - "5432:5432" # แมปพอร์ต: เชื่อมพอร์ต 5432 บนเครื่องโฮสต์ของคุณเข้ากับพอร์ต 5432 ใน Container

    volumes:
      # เมาท์ไฟล์ init.sql จากเครื่องโฮสต์เข้าไปในโฟลเดอร์เริ่มต้นของ PostgreSQL Container
      # Docker จะรันไฟล์ .sql ทั้งหมดในโฟลเดอร์นี้เมื่อ Container เริ่มต้นครั้งแรก
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      # Volume สำหรับเก็บข้อมูลฐานข้อมูลแบบถาวร เพื่อให้ข้อมูลไม่หายไปเมื่อ Container ถูกหยุดหรือลบ
      - pgdata:/var/lib/postgresql/data
  ollama:
    # Use the official Ollama Docker image from Docker Hub.
    # The 'latest' tag will pull the most recent stable version.
    image: ollama/ollama:latest
    # Set the container name for easier identification and management.
    container_name: ollama
    # Map port 11434 from the container to port 11434 on the host machine.
    # This is the default port Ollama uses for its API.
    ports:
      - "11434:11434"
    # Mount a named volume to persist Ollama's data (models, configurations).
    # This ensures that your downloaded models are not lost if the container is removed.
    volumes:
      - ./init-ollama.sh:/usr/local/bin/init-ollama.sh
      - ollama_data:/root/.ollama
    # Set the restart policy. 'unless-stopped' means the container will
    # restart automatically unless it's explicitly stopped by the user.
    entrypoint: ["/bin/bash", "/usr/local/bin/init-ollama.sh"]
    restart: unless-stopped
    # Optional: Configure GPU access for better performance if you have a compatible GPU.
    # Uncomment the 'deploy' section if you want to enable GPU support.
    # Requires NVIDIA Docker Runtime or similar setup on your host.
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all # Use 'all' for all GPUs, or specify device IDs (e.g., '0')
    #           capabilities: [gpu] # Request GPU capabilities

  n8n:
    image: n8nio/n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_SECURE_COOKIE=false


volumes:
  pgdata_test:
  ollama_data:
  pgdata: # กำหนดชื่อ Docker Volume เพื่อให้ Docker จัดการการเก็บข้อมูลให้
    # Optional: You can specify an external volume if you have one pre-configured,
    # but for most cases, leaving it empty allows Docker to manage it automatically.
    # external: true
  